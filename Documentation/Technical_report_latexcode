\documentclass[conference]{IEEEtran}
\usepackage[utf8]{inputenc}
\usepackage[english]{babel}
\usepackage[T1]{fontenc}
\usepackage{graphicx}
\usepackage{hyperref}
\usepackage{booktabs}
\usepackage{listings}
\usepackage{amsmath}

\title{Technical Report: Graphical Music Compiler}
\author{
    \IEEEauthorblockN{Esteban Alejandro Villalba Delgadillo, Daniel Felipe Barrera Suarez} \\
    \IEEEauthorblockA{Universidad Distrital Francisco Jose de Caldas, Bogotá, Colombia}
}

\begin{document}

\maketitle

\begin{abstract}
This project presents the design of a graphical-musical interpretive system that transforms structured textual instructions into visual representations of musical notation. Inspired by the domain-specific language (DSL) paradigm, our approach implements a processing pipeline that parses commands such as \texttt{play [note] for [duration] at [time]}, builds an intermediate piano roll representation, and generates visualizations using \texttt{matplotlib}. We detail the basic grammar, the internal data model, and the note-to-graph mapping, establishing the foundation for future extensions including real-time sound synthesis via \texttt{pygame}.
\end{abstract}

\begin{IEEEkeywords}
Domain-specific languages, computational music, sound visualization, DSL, Pygame, piano roll.
\end{IEEEkeywords}

\section{Introduction}
Domain-specific languages (DSLs) have proven their educational value by enabling complex concepts to be expressed through simplified syntax. In computer science, this paradigm is often explored by creating micro-languages that generate graphical outputs from minimalist text commands.

Our project applies this idea to the musical domain by developing an interpreter that converts commands such as:

\begin{lstlisting}[language=Python]
play C4 for 1.0 at 0.0
play E4 for 0.5 at 1.0
\end{lstlisting}

into \textit{piano roll} visual representations, a standard format in digital music production.

\section{Literature Review}
Languages such as Sonic Pi~\cite{sonicpi}, FoxDot~\cite{foxdot}, and TidalCycles have shown that it is possible to manipulate music in real time through code. However, many of these require advanced technical knowledge. Our approach aims for pedagogical accessibility through simplified design.

Additionally, libraries like Pygame allow sound playback in a straightforward way, making it feasible to combine symbolic notation, sound reproduction, and graphical visualization in educational environments.

\section{Background}
The initial interpreter will use lists of instructions to trigger sounds using \texttt{pygame.mixer} or similar libraries.

This project is grounded in theoretical principles studied in Workshop 1 of the course, specifically finite automata, regular expressions, and context-free grammars. These concepts inform the design of the language's lexical and syntactic structure. The interpreter's ability to model rules for notes, durations, and repetitions stems directly from grammar modeling and derivation trees explored in class. Thus, the workshop provided the core foundation for building a functional and parsable DSL.

\section{Objectives}
\begin{itemize}
    \item Design a symbolic interpreter for musical phrases.
    \item Create a textual interface to interpret these phrases.
    \item Implement a sound execution prototype.
    \item Establish the foundation for real-time visualization.
\end{itemize}

\section{Scope}
Prototype limitations:

\begin{itemize}
    \item Only simple musical notes.
    \item Basic durations (quarter, eighth notes).
    \item Sequential execution.
    \item Textual or \textit{piano roll} visual representation (no traditional scores).
\end{itemize}

\section{Assumptions}
\begin{itemize}
    \item User has basic programming knowledge.
    \item Note format: \texttt{C4}, \texttt{D\#5}.
    \item Fixed tempo (e.g., 120 BPM).
    \item No concurrency or parallel execution.
\end{itemize}

\section{Limitations}
\begin{itemize}
    \item No live editing or real-time execution.
    \item Monophonic playback.
    \item Sound quality limited to .wav files or basic tones.
    \item No MIDI export or graphical score generation at this stage.
\end{itemize}

\section{Methodology}
The methodology begins with the definition of a minimal symbolic language that allows users to describe notes and their durations. For instance, inputs such as \texttt{["C4-1/4", "E4-1/4", "G4-1/2"]} are parsed using a simple recursive descent parser. The interpreter, implemented in Python, uses \texttt{pygame.mixer} to play notes sequentially.

Once parsing is successful, a visualization is generated using \texttt{matplotlib}, where each note is represented as a bar on a piano roll diagram. Future work includes expanding the syntax to support chords, loops, and live manipulation.

\section{Glossary}
\begin{itemize}
    \item \textbf{BPM}: Beats Per Minute, measures the musical tempo.
    \item \textbf{Pygame}: Python library for multimedia development.
    \item \textbf{Musical Syntax}: Textual representation of notes and durations.
\end{itemize}

\section*{Acknowledgements}
We thank the course team for their guidance in technical design and the academic institution that encourages projects combining music and technology.

\section*{Appendix (Future Work)}
The appendix will include syntax examples, code snippets, and the folder structure of the project. It will be added once implementation progresses further.

\bibliographystyle{IEEEtran}

\begin{thebibliography}{1}
\bibitem{sonicpi}
Sonic Pi. \url{https://sonic-pi.net}

\bibitem{foxdot}
FoxDot. \url{https://foxdot.org}

\bibitem{brown2019dsl}
Brown, C. et al. “Designing DSLs for Education”, \textit{Proc. ACM Educators Workshop}, 2019.

\bibitem{dannenberg2021music}
Dannenberg, R. “Music Representation Issues, Techniques, and Systems”, \textit{Computer Music Journal}, 2021.

\bibitem{pygame}
Pygame Documentation, \url{https://www.pygame.org/docs}
\end{thebibliography}

\end{document}
